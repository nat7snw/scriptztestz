local Library = loadstring(game:HttpGetAsync("https://github.com/ActualMasterOogway/Fluent-Renewed/releases/latest/download/Fluent.luau"))()
local SaveManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/SaveManager.luau"))()
local InterfaceManager = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/ActualMasterOogway/Fluent-Renewed/master/Addons/InterfaceManager.luau"))()

local Window = Library:CreateWindow({
    Title = "Beamed V2 fluent version",
    SubTitle = "Muscle Legends",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Solarized Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Create Tabs
local MainTab = Window:AddTab({ Title = "Main", Icon = "home" })
local AutoFarmTab = Window:AddTab({ Title = "Auto Farm", Icon = "dumbbell" })
local TeleportTab = Window:AddTab({ Title = "Teleport", Icon = "map-pin" })
local CrystalsTab = Window:AddTab({ Title = "Crystals", Icon = "gem" })
local KillerTab = Window:AddTab({ Title = "Killer", Icon = "swords" })
local SettingsTab = Window:AddTab({ Title = "Settings" })

-- Initialize SaveManager and InterfaceManager
SaveManager:SetLibrary(Library)
InterfaceManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("MasterBoy123Client")
SaveManager:SetFolder("MasterBoy123Client/MuscleLegendsConfig")

-- Variables
local player = game.Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local character = player.Character or player.CharacterAdded:Wait()

-- Settings
local Settings = {
    HandStands = false,
    Pushups = false,
    Situps = false,
    Weight = false
}

-- Functions
local function equipTool(toolName)
    local tool = backpack:FindFirstChild(toolName)
    if tool then
        tool.Parent = character
        return tool
    end
    return nil
end

local function unequipTool(toolName)
    if character then
        local tool = character:FindFirstChild(toolName)
        if tool then
            tool.Parent = backpack
        end
    end
end

-- Auto Farm Section
local FarmSection = AutoFarmTab:AddSection("Workout Controls")

FarmSection:AddToggle("HandstandsToggle", {
    Title = "Auto HandStands",
    Default = false,
    Callback = function(Value)
        Settings.HandStands = Value
        if Value then
            equipTool("Handstands")
            spawn(function()
                while wait() do
                    if not Settings.HandStands then break end
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                end
            end)
        else
            unequipTool("Handstands")
        end
    end
})

FarmSection:AddToggle("PushupsToggle", {
    Title = "Auto Pushups",
    Default = false,
    Callback = function(Value)
        Settings.Pushups = Value
        if Value then
            equipTool("Pushups")
            spawn(function()
                while wait() do
                    if not Settings.Pushups then break end
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                end
            end)
        else
            unequipTool("Pushups")
        end
    end
})

FarmSection:AddToggle("SitupsToggle", {
    Title = "Auto Situps",
    Default = false,
    Callback = function(Value)
        Settings.Situps = Value
        if Value then
            equipTool("Situps")
            spawn(function()
                while wait() do
                    if not Settings.Situps then break end
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                end
            end)
        else
            unequipTool("Situps")
        end
    end
})

FarmSection:AddToggle("WeightToggle", {
    Title = "Auto Weight",
    Default = false,
    Callback = function(Value)
        Settings.Weight = Value
        if Value then
            equipTool("Weight")
            spawn(function()
                while wait() do
                    if not Settings.Weight then break end
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("rep")
                end
            end)
        else
            unequipTool("Weight")
        end
    end
})

-- Killer Section
local KillerSection = KillerTab:AddSection("Combat")

KillerSection:AddToggle("KillAuraToggle", {
    Title = "Kill Aura",
    Default = false,
    Callback = function(Value)
        _G.KillAura = Value
        while _G.KillAura do
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch","rightHand")
            game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch","leftHand")
            wait()
        end
    end
})

KillerSection:AddToggle("AutoKill", {
    Title = "Auto Kill",
    Default = false,
    Callback = function(Value)
        _G.AutoKill = Value
        if Value then
            equipTool("Punch")
            spawn(function()
                while _G.AutoKill and wait() do
                    -- Get all players' heads first
                    local heads = {}
                    for _, v in pairs(game.Players:GetPlayers()) do
                        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") then
                            -- Store original CFrame
                            local head = v.Character.Head
                            heads[head] = head.CFrame
                            -- Teleport to hand
                            head.CFrame = game.Players.LocalPlayer.Character.RightHand.CFrame
                        end
                    end
                    
                    -- Punch
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch","rightHand")
                    game:GetService("Players").LocalPlayer.muscleEvent:FireServer("punch","leftHand")
                end
            end)
        end
    end
})

KillerSection:AddButton({
    Title = "Teleport All Heads",
    Callback = function()
        -- Collect all heads first
        local heads = {}
        for _, v in pairs(game.Players:GetPlayers()) do
            if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") then
                table.insert(heads, v.Character.Head)
            end
        end
        
        -- Teleport all heads at once
        for _, head in ipairs(heads) do
            head.CFrame = game.Players.LocalPlayer.Character.RightHand.CFrame
        end
    end
})

-- Crystal Section
local CrystalSection = CrystalsTab:AddSection("Auto Open Crystals")

local selectedCrystal = "Blue Crystal"
local isOpening = false

CrystalSection:AddDropdown("CrystalSelect", {
    Title = "Select Crystal",
    Values = {
        "Blue Crystal",      -- Spawn Gym
        "Green Crystal",     -- Beach Gym
        "Frost Crystal",     -- Frost Gym
        "Mythical Crystal",  -- Mythical Gym
        "Inferno Crystal",   -- Inferno Gym
        "Legends Crystal",   -- Added Legends Crystal
        "Muscle Elite Crystal", -- Legend Gym
        "Galaxy Oracle Crystal" -- Muscle King Gym
    },
    Default = "Blue Crystal",
    Callback = function(Value)
        selectedCrystal = Value
    end
})

CrystalSection:AddToggle("AutoOpenCrystal", {
    Title = "Auto Open Selected Crystal",
    Default = false,
    Callback = function(Value)
        isOpening = Value
        if Value then
            spawn(function()
                while isOpening do
                    game:GetService("ReplicatedStorage").rEvents.openCrystalRemote:InvokeServer("openCrystal", selectedCrystal)
                    wait()
                end
            end)
        end
    end
})

-- Teleport Function
local function teleportTo(x, y, z)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = CFrame.new(x, y, z)
    end
end

-- Teleport Sections
local GymSection = TeleportTab:AddSection("Training Locations")
local BrawlSection = TeleportTab:AddSection("Brawl Areas")
local OtherSection = TeleportTab:AddSection("Other Areas")

-- Gym Teleports
GymSection:AddButton({
    Title = "Tiny Gym",
    Callback = function()
        teleportTo(-42, 7, 1892)
    end
})

GymSection:AddButton({
    Title = "Beach Gym",
    Callback = function()
        teleportTo(30, 7, 76)
    end
})

GymSection:AddButton({
    Title = "Frost Gym",
    Callback = function()
        teleportTo(-2623, 7, -409)
    end
})

GymSection:AddButton({
    Title = "Mythic Gym",
    Callback = function()
        teleportTo(2250, 7, 1073)
    end
})

GymSection:AddButton({
    Title = "Inferno Gym",
    Callback = function()
        teleportTo(-6758, 7, -1284)
    end
})

GymSection:AddButton({
    Title = "Legends Gym",
    Callback = function()
        teleportTo(4603, 991, -3897)
    end
})

GymSection:AddButton({
    Title = "Muscle King Gym",
    Callback = function()
        teleportTo(-8625, 17, -5730)
    end
})

-- Brawl Teleports
BrawlSection:AddButton({
    Title = "Beach Brawl",
    Callback = function()
        teleportTo(-1814, 19, -6312)
    end
})

BrawlSection:AddButton({
    Title = "Sandy Brawl",
    Callback = function()
        teleportTo(973, 17, -7429)
    end
})

BrawlSection:AddButton({
    Title = "Lava Brawl",
    Callback = function()
        teleportTo(4464, 16, -8845)
    end
})

-- Other Teleports
OtherSection:AddButton({
    Title = "No Wheel Area",
    Callback = function()
        teleportTo(1958, 1, 6133)
    end
})

OtherSection:AddButton({
    Title = "Wheel Area",
    Callback = function()
        teleportTo(-2592, 1, 5704)
    end
})

-- Settings Tab Configuration
SaveManager:BuildConfigSection(SettingsTab)

-- Character Respawn Handler
player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    wait(1)
    for toolName, isEnabled in pairs(Settings) do
        if isEnabled then
            equipTool(toolName)
        end
    end
end)

-- Load Interface Manager
InterfaceManager:BuildInterfaceSection(SettingsTab)

-- Move the Main Tab to the top
local tabs = Window:GetTabs()
table.insert(tabs, 1, MainTab)
Window:SetTabs(tabs)
